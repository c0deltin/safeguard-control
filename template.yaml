AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "The infrastructure for the safeguard-control."

Globals:
  Function:
    Runtime: go1.x
    Timeout: 60

Parameters:
  Stage:
    Description: "examples: local, dev, test, prod etc."
    Type: String
    Default: prod
  CapturesBucketName:
    Type: String
    Default: safeguard-captures
  SMSReceiver:
    Description: "The phone number which receive the security notice."
    Type: String
  ArmQueueName:
    Type: String
    Default: safeguard-arm-queue
  ArmSnsTopicName:
    Type: String
    Default: safeguard-arm-topic

Resources:
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/auth/
      Handler: main
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          COGNITO_POOL_ID: "TEST" # todo

  ControlAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowOrigin: "'*'" # todo
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      Auth:
        Authorizers:
          AuthorizerFunction:
            FunctionPayloadType: TOKEN
            FunctionArn:
              Fn::GetAtt:
                - AuthorizerFunction
                - Arn
            Identity:
              Header: Authorization
              ValidationExpression: Bearer.*
              ReauthorizeEvery: 5
            CognitoAuthorizer:
              UserPoolArn: COGNITO_POOL_ARN # todo

  ControlAPIBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: api
      DomainName: codeltin.io #todo
      RestApiId: !Ref ControlAPI
      Stage: !Ref Stage

  DeviceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  CapturesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: deviceID
          KeyType: HASH
        - AttributeName: captureDate
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: deviceID
          AttributeType: S
        - AttributeName: captureDate
          AttributeType: N

  GetDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/get_device/
      Handler: main
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DeviceTable
        - AWSLambdaBasicExecutionRole
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /devices/{deviceID}
            Method: GET
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          DEVICE_TABLE_NAME: !Ref DeviceTable

  ArmQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ArmQueueName

  ArmSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      FifoTopic: true
      TopicName: !Ref ArmSnsTopicName

  ArmSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt
        - ArmQueue
        - Arn
      TopicArn: !Ref ArmSnsTopic

  ArmSNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SafeguardSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Sub ${ArmSnsTopic.Arn}

  ArmDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/arm_device/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeviceTable
        - AWSLambdaBasicExecutionRole
      Role: !Sub ${ArmSNSRole.Arn}
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /devices/{deviceID}/arm
            Method: POST
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          DEVICE_TABLE_NAME: !Ref DeviceTable
          SNS_TOPIC_ARN: !Ref ArmSnsTopic

  DisarmDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/disarm_device/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeviceTable
        - AWSLambdaBasicExecutionRole
      Role: !Sub ${ArmSNSRole.Arn}
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /devices/{deviceID}/disarm
            Method: POST
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          DEVICE_TABLE_NAME: !Ref DeviceTable
          SNS_TOPIC_ARN: !Ref ArmSnsTopic

  StoreCaptureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/store_capture/
      Handler: main
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonS3ReadOnlyAccess
        - AmazonSNSFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref CapturesTable
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          CAPTURE_BUCKET_NAME: !Ref CapturesBucketName
          CAPTURES_TABLE_NAME: !Ref CapturesTable
          SMS_RECEIVER: !Ref SMSReceiver

  CapturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CapturesBucketName
      AccessControl: Private
      Tags:
        - Key: name
          Value: "Safeguard Captures"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt StoreCaptureFunction.Arn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StoreCaptureFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${CapturesBucket}

  GetAllCapturesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/get_captures/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapturesTable
        - AmazonS3ReadOnlyAccess
        - AWSLambdaBasicExecutionRole
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /captures/{deviceID}
            Method: GET
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          CAPTURES_TABLE_NAME: !Ref CapturesTable

  GetCaptureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/get_capture/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapturesTable
        - AmazonS3ReadOnlyAccess
        - AWSLambdaBasicExecutionRole
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /captures/{deviceID}/{captureDate}
            Method: GET
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          CAPTURES_TABLE_NAME: !Ref CapturesTable
