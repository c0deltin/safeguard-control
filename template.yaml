AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "The infrastructure for the safeguard-control."

Globals:
  Function:
    Runtime: go1.x
    Timeout: 60

Parameters:
  Stage:
    Description: "examples: local, dev, test, prod etc."
    Type: String
    Default: prod
  CapturesBucketName:
    Type: String
    Default: safeguard-captures
  SMSReceiver:
    Description: "The phone number which receive the security notice."
    Type: String
  ArmSnsTopicName:
    Type: String
    Default: SafeguardTopic.fifo
  DomainName:
    Type: String
    Description: "The domain for this application."

Resources:
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/auth/
      Handler: main
      Policies:
        - CloudWatchPutMetricPolicy: { }
      Environment:
        Variables:
          COGNITO_POOL_ID: "{{resolve:ssm:/safeguard/cognito/userpool/id}}"

  ControlAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowOrigin: "'*'" # todo
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AccessLogSetting:
        DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}'
        Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'
      GatewayResponses:
        ACCESS_DENIED:
          ResponseTemplates:
            application/json: "{\"message\": \"access denied\"}"
        EXPIRED_TOKEN:
          ResponseTemplates:
            application/json: "{\"message\": \"token expired\"}"
        UNAUTHORIZED:
          ResponseTemplates:
            application/json: "{\"message\": \"unauthorized\"}"
        AUTHORIZER_FAILURE:
          ResponseTemplates:
            application/json: "{\"message\": \"internal server error\"}"
        AUTHORIZER_CONFIGURATION_ERROR:
          ResponseTemplates:
            application/json: "{\"message\": \"internal server error\"}"
        BAD_REQUEST_BODY:
          ResponseTemplates:
            application/json: "{\"message\": \"bad request\"}"
        BAD_REQUEST_PARAMETERS:
          ResponseTemplates:
            application/json: "{\"message\": \"bad request\"}"
        DEFAULT_5XX:
          ResponseTemplates:
            application/json: "{\"message\": \"internal server error\"}"
      Auth:
        Authorizers:
          AuthorizerFunction:
            FunctionPayloadType: TOKEN
            FunctionArn:
              Fn::GetAtt:
                - AuthorizerFunction
                - Arn
            Identity:
              Header: Authorization
              ValidationExpression: Bearer.*
              ReauthorizeEvery: 5
            CognitoAuthorizer:
              UserPoolArn: "{{resolve:ssm:/safeguard/cognito/userpool/arn}}"

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-Control-${ControlAPI}
      RetentionInDays: 365

  ApiGatewayPushToCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Push logs to CloudWatch logs from API Gateway"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayPushToCloudWatchRole.Arn

  ControlAPIBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: api
      DomainName: !Ref DomainName
      RestApiId: !Ref ControlAPI
      Stage: !Ref Stage

  DeviceTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  CapturesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: deviceID
          KeyType: HASH
        - AttributeName: captureDate
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: deviceID
          AttributeType: S
        - AttributeName: captureDate
          AttributeType: N

  GetDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/get_device/
      Handler: main
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DeviceTable
        - AWSLambdaBasicExecutionRole
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /devices/{deviceID}
            Method: GET
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          DEVICE_TABLE_NAME: !Ref DeviceTable

  ArmQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SafeguardQueue.fifo
      FifoQueue: true

  ArmSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      FifoTopic: true
      TopicName: !Ref ArmSnsTopicName
      Subscription:
        - Endpoint: !GetAtt ArmQueue.Arn
          Protocol: sqs

  ArmSNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SafeguardSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ArmSnsTopic

  ArmDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/arm_device/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeviceTable
        - AWSLambdaBasicExecutionRole
      Role: !Sub ${ArmSNSRole.Arn}
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /devices/{deviceID}/arm
            Method: POST
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          DEVICE_TABLE_NAME: !Ref DeviceTable
          SNS_TOPIC_ARN: !Ref ArmSnsTopic

  DisarmDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/disarm_device/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeviceTable
        - AWSLambdaBasicExecutionRole
      Role: !Sub ${ArmSNSRole.Arn}
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /devices/{deviceID}/disarm
            Method: POST
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          DEVICE_TABLE_NAME: !Ref DeviceTable
          SNS_TOPIC_ARN: !Ref ArmSnsTopic

  CapturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CapturesBucketName
      AccessControl: Private
      Tags:
        - Key: name
          Value: "Safeguard Captures"

  StoreCaptureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/store_capture/
      Handler: main
      Role: !GetAtt CapturesRole.Arn
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref CapturesBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          CAPTURE_BUCKET_NAME: !Ref CapturesBucketName
          CAPTURES_TABLE_NAME: !Ref CapturesTable
          SMS_RECEIVER: !Ref SMSReceiver

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StoreCaptureFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${CapturesBucket}

  CapturesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: WriteLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: PushToSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - '*' # allow phone number
        - PolicyName: DynamoDBCrud
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                Resource:
                 - !GetAtt CapturesTable.Arn
  GetAllCapturesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/get_captures/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapturesTable
        - AmazonS3ReadOnlyAccess
        - AWSLambdaBasicExecutionRole
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /captures/{deviceID}
            Method: GET
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          CAPTURES_TABLE_NAME: !Ref CapturesTable

  GetCaptureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/get_capture/
      Handler: main
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapturesTable
        - AmazonS3ReadOnlyAccess
        - AWSLambdaBasicExecutionRole
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /captures/{deviceID}/{captureDate}
            Method: GET
            RestApiId: !Ref ControlAPI
            Auth:
              Authorizer: AuthorizerFunction
      Environment:
        Variables:
          DYNAMODB_ENDPOINT: ""
          CAPTURES_TABLE_NAME: !Ref CapturesTable
